-- Generated by Oracle SQL Developer Data Modeler 19.4.0.350.1424
--   at:        2020-02-26 16:40:07 CET
--   site:      Oracle Database 12cR2
--   type:      Oracle Database 12cR2



CREATE TABLE gatunki (
    id_gatunku     INTEGER NOT NULL,
    nazwa_gatunku  VARCHAR2(30) NOT NULL,
    opis_gatunku   VARCHAR2(1000 CHAR)
);

COMMENT ON TABLE gatunki IS
    'Tabela s³ownikowa Gatunek';

COMMENT ON COLUMN gatunki.nazwa_gatunku IS
    'Nazwa gatunku unikalna';

COMMENT ON COLUMN gatunki.opis_gatunku IS
    'Opis gatunku';

ALTER TABLE gatunki ADD CONSTRAINT gatunki_pk PRIMARY KEY ( id_gatunku );

ALTER TABLE gatunki ADD CONSTRAINT nazwa_gatunku_unique UNIQUE ( nazwa_gatunku );

CREATE TABLE gatunki_obserwowane (
    id_gatunku             INTEGER NOT NULL,
    id_uzytkownika         INTEGER NOT NULL,
    data_czas_rozpoczecia  TIMESTAMP(0) DEFAULT systimestamp
        CONSTRAINT nnc_gatunki_obserwowane_data_czas_rozpoczecia NOT NULL,
    data_czas_zakonczenia  TIMESTAMP(0)
);

COMMENT ON TABLE gatunki_obserwowane IS
    'Tabela ³¹cz¹ca i jednoczeœnie pomocnicza. Wiele gatunków  mo¿e byæ  obserwowanych przez  jednego u¿ytkownika, jak gatunek mo¿e byæ obserwowany przez wielu. Klucz z³o¿ony zapewnia przypadek braku konfliktu, gdy ktoœ "polubi", "odlubi", by póŸniej znowu polubiæ.';

ALTER TABLE gatunki_obserwowane
    ADD CONSTRAINT gatunki_obserwowane_pk PRIMARY KEY ( id_gatunku,
                                                        id_uzytkownika,
                                                        data_czas_rozpoczecia );

CREATE TABLE komentarze_playlist (
    id_komentarza         INTEGER NOT NULL,
    komentarz             VARCHAR2(500 CHAR) NOT NULL,
    data_czas_komentarza  TIMESTAMP(0) DEFAULT systimestamp
        CONSTRAINT nnc_komentarze_relacjiv1_data_czas_komentarza NOT NULL
);

ALTER TABLE komentarze_playlist ADD CONSTRAINT komentarze_playlist_pk PRIMARY KEY ( id_komentarza );

CREATE TABLE komentarze_relacji (
    id_komentarza         INTEGER NOT NULL,
    komentarz             VARCHAR2(500 CHAR) NOT NULL,
    data_czas_komentarza  TIMESTAMP(0) DEFAULT systimestamp NOT NULL
);

ALTER TABLE komentarze_relacji ADD CONSTRAINT komentarze_relacji_pk PRIMARY KEY ( id_komentarza );

CREATE TABLE komentarze_utwory (
    id_komentarza         INTEGER NOT NULL,
    komentarz             VARCHAR2(500 CHAR) NOT NULL,
    data_czas_komentarza  TIMESTAMP(0) DEFAULT systimestamp
        CONSTRAINT nnc_komentarze_playlistv1_data_czas_komentarza NOT NULL,
    data_czas_usuniecia   TIMESTAMP(0)
);

ALTER TABLE komentarze_utwory ADD CONSTRAINT komentarze_utwory_pk PRIMARY KEY ( id_komentarza );

CREATE TABLE playlisty_komentarze (
    id_playlisty_komentarze  INTEGER NOT NULL,
    id_playlisty             INTEGER NOT NULL,
    id_uzytkownika           INTEGER NOT NULL,
    id_komentarza            INTEGER NOT NULL
);

COMMENT ON TABLE playlisty_komentarze IS
    'W ramach ka¿dej playlisty uzytkownik mo¿e zamieœciæ dowolna ilosc komentarzy. Ka¿dy komentarz jest unikalny i przechowywany w oddzielnej tabeli dla ka¿dego innego obiektu (kom. odnoœnie utworów, relacji, playlist).';

COMMENT ON COLUMN playlisty_komentarze.id_komentarza IS
    'Unikalna wartoœæ - tak jak przy komentarzach do relacji.
';

ALTER TABLE playlisty_komentarze
    ADD CONSTRAINT playlisty_komentarze_pk PRIMARY KEY ( id_playlisty,
                                                         id_uzytkownika,
                                                         id_playlisty_komentarze );

ALTER TABLE playlisty_komentarze ADD CONSTRAINT playlisty_komentarze__un UNIQUE ( id_komentarza );

CREATE TABLE playlisty_obserwowane (
    id_playlisty           INTEGER NOT NULL,
    id_uzytkownika         INTEGER NOT NULL,
    data_czas_rozpoczecia  TIMESTAMP(0) DEFAULT systimestamp NOT NULL,
    data_czas_zakonczenia  TIMESTAMP
);

COMMENT ON TABLE playlisty_obserwowane IS
    'Tabela ³¹cz¹ca i jednoczeœnie pomocnicza. Wiele u¿ytkowników mo¿e obserwowaæ jedn¹, jak wiele playlist moze byc obserwowanych przez jednego u¿ytkownika. Klucz z³o¿ony zapewnia przypadek braku konfliktu, gdy ktoœ "polubi", "odlubi", by póŸniej znowu polubiæ.';

ALTER TABLE playlisty_obserwowane
    ADD CONSTRAINT playlisty_obserwowane_pk PRIMARY KEY ( id_playlisty,
                                                          id_uzytkownika,
                                                          data_czas_rozpoczecia );

CREATE TABLE playlisty_utwory (
    id_playlisty         INTEGER NOT NULL,
    id_utworu            INTEGER NOT NULL,
    data_czas_dodania    TIMESTAMP(0) DEFAULT systimestamp NOT NULL,
    data_czas_usuniecia  TIMESTAMP
);

ALTER TABLE playlisty_utwory
    ADD CONSTRAINT playlisty_utwory_pk PRIMARY KEY ( id_playlisty,
                                                     id_utworu,
                                                     data_czas_dodania );

CREATE TABLE playlisty_uzytkownika (
    id_playlisty                    INTEGER NOT NULL,
    id_uzytkownika                  INTEGER NOT NULL,
    nazwa_playlisty                 INTEGER NOT NULL,
    data_czas_utworzenia_playlisty  TIMESTAMP(0) NOT NULL,
    opis_playlisty                  VARCHAR2(500 CHAR),
    czy_publiczna                   CHAR(1 CHAR) NOT NULL
);

COMMENT ON COLUMN playlisty_uzytkownika.czy_publiczna IS
    'Defaultowo N. Gdy upubliczniona, to inni u¿ytkownicy mog¹ j¹ widzieæ.';

ALTER TABLE playlisty_uzytkownika ADD CONSTRAINT playlisty_uzytkownika_pk PRIMARY KEY ( id_playlisty );

CREATE TABLE relacje_komentarze (
    id_relacje_komentarze  INTEGER NOT NULL,
    id_relacji             INTEGER NOT NULL,
    id_uzytkownika         INTEGER NOT NULL,
    id_komentarza          INTEGER
);

COMMENT ON TABLE relacje_komentarze IS
    'W ramach ka¿dej relacji uzytkownik mo¿e zamieœciæ dowolna ilosc komentarzy. Ka¿dy komentarz jest unikalny i przechowywany w oddzielnej tabeli dla ka¿dego innego obiektu (kom. odnoœnie utworów, relacji, playlist).';

ALTER TABLE relacje_komentarze
    ADD CONSTRAINT relacje_komentarze_pk PRIMARY KEY ( id_relacji,
                                                       id_uzytkownika,
                                                       id_relacje_komentarze );

ALTER TABLE relacje_komentarze ADD CONSTRAINT id_komentarza_unique UNIQUE ( id_komentarza );

CREATE TABLE relacje_uzytkownika (
    id_relacji         INTEGER NOT NULL,
    id_uzytkownika     INTEGER NOT NULL,
    plik_uzytkownika   BFILE,
    opis_relacji       VARCHAR2(1000),
    data_czas_relacji  TIMESTAMP(0) DEFAULT systimestamp NOT NULL
);

COMMENT ON COLUMN relacje_uzytkownika.plik_uzytkownika IS
    'Trzeba wprowadziæ ograniczenie, by relacja trwa³a maksymalnie 20 sekund.';

ALTER TABLE relacje_uzytkownika ADD CONSTRAINT relacje_uzytkownika_pk PRIMARY KEY ( id_relacji );

CREATE TABLE typy_zgloszenia (
    id_zgloszenia    INTEGER NOT NULL,
    typ_zgloszenia   VARCHAR2(100 CHAR) NOT NULL,
    opis_zgloszenia  VARCHAR2(1000 CHAR) NOT NULL
);

COMMENT ON COLUMN typy_zgloszenia.typ_zgloszenia IS
    'Unikalna wartoœc typu zgloszenia. ';

COMMENT ON COLUMN typy_zgloszenia.opis_zgloszenia IS
    'Opis zgloszenia opisuje ustalone zg³oszenie- czego siê tyczy, ró¿ne kary, itp.';

ALTER TABLE typy_zgloszenia ADD CONSTRAINT typy_zgloszenia_pk PRIMARY KEY ( id_zgloszenia );

ALTER TABLE typy_zgloszenia ADD CONSTRAINT typ_zgloszenia_unique UNIQUE ( typ_zgloszenia );

CREATE TABLE utwory (
    id_utworu                 INTEGER NOT NULL,
    nazwa_utworu              VARCHAR2(100 CHAR) NOT NULL,
    dlugosc_utworu            INTEGER NOT NULL,
    plik_muzyczny             BFILE NOT NULL,
    data_czas_wgrania_utworu  TIMESTAMP(0) NOT NULL,
    ilosc_polubien            INTEGER DEFAULT 0 NOT NULL,
    ilosc_udostepnien         INTEGER DEFAULT 0 NOT NULL,
    id_utworu_do_remixu       INTEGER
);

COMMENT ON COLUMN utwory.dlugosc_utworu IS
    'Przechowywanie w sekundach. Jakis sposob na obliczenie dlugosci wrzuconego utworu. ';

COMMENT ON COLUMN utwory.plik_muzyczny IS
    'Œcie¿ka do pliku muzycznego w systemie plikow';

COMMENT ON COLUMN utwory.ilosc_polubien IS
    'Warunek, by ilosc nie byla jakims cudem mniejsza od 0';

COMMENT ON COLUMN utwory.id_utworu_do_remixu IS
    'Klucz obcy do Id_utworu (nieobowi¹zkowy)';

ALTER TABLE utwory ADD CONSTRAINT utwory_dlugosc_utworu_check CHECK ( dlugosc_utworu > 0 );

ALTER TABLE utwory ADD CONSTRAINT utwory_pk PRIMARY KEY ( id_utworu );

CREATE TABLE utwory_gatunki (
    id_utworu   INTEGER NOT NULL,
    id_gatunku  INTEGER NOT NULL
);

COMMENT ON TABLE utwory_gatunki IS
    'Utwór mo¿e posiadaæ wiele gatunków (taki mix gatunków)';

ALTER TABLE utwory_gatunki ADD CONSTRAINT utwory_gatunki_pk PRIMARY KEY ( id_utworu,
                                                                          id_gatunku );

CREATE TABLE utwory_komentarze (
    id_utworu_komentarze  INTEGER NOT NULL,
    id_utworu             INTEGER NOT NULL,
    id_uzytkownika        INTEGER NOT NULL,
    id_komentarza         INTEGER
);

COMMENT ON TABLE utwory_komentarze IS
    'W ramach ka¿dego utwru uzytkownik mo¿e zamieœciæ dowolna ilosc komentarzy. ';

ALTER TABLE utwory_komentarze
    ADD CONSTRAINT utwory_komentarze_pk PRIMARY KEY ( id_utworu,
                                                      id_uzytkownika,
                                                      id_utworu_komentarze );

ALTER TABLE utwory_komentarze ADD CONSTRAINT utwory_komentarze__un UNIQUE ( id_komentarza );

CREATE TABLE utwory_udostepnienia (
    id_utworu                    INTEGER NOT NULL,
    id_uzytkownika               INTEGER NOT NULL,
    data_czas_udostepnienia      TIMESTAMP(0) DEFAULT systimestamp NOT NULL,
    data_czas_zak_udostepnienia  TIMESTAMP(0)
);

COMMENT ON TABLE utwory_udostepnienia IS
    'Tabela ³¹cz¹ca i jednoczeœnie pomocnicza. Wiele u¿ytkowników mo¿e udostêpniæ jeden utwór, jak i wiele utworów mo¿e byæ udostêpnionych przez jednego. Klucz z³o¿ony zapewnia przypadek braku konfliktu, gdy ktoœ "polubi", "odlubi", by póŸniej znowu polubiæ.
';

ALTER TABLE utwory_udostepnienia
    ADD CONSTRAINT utwory_udostepnienia_pk PRIMARY KEY ( id_utworu,
                                                         id_uzytkownika,
                                                         data_czas_udostepnienia );

CREATE TABLE utwory_uzytkownicy (
    id_utworu       INTEGER NOT NULL,
    id_uzytkownika  INTEGER NOT NULL
);

COMMENT ON TABLE utwory_uzytkownicy IS
    'Tabela ³¹cz¹ca. Wielu u¿ytkowników moze pracowaænad 1 utworem, wiele utworów moze byæprzez 1 u¿ytkownika.
';

ALTER TABLE utwory_uzytkownicy ADD CONSTRAINT utwory_uzytkownicy_pk PRIMARY KEY ( id_utworu,
                                                                                  id_uzytkownika );

CREATE TABLE utwory_zezwolenia_remix (
    id_utwor              INTEGER NOT NULL,
    id_uzytkownika        INTEGER NOT NULL,
    data_czas_zezwolenia  TIMESTAMP(0) NOT NULL,
    opis_zezwolenia       VARCHAR2(300 CHAR)
);

ALTER TABLE utwory_zezwolenia_remix ADD CONSTRAINT utwory_zezwolenia_remix_pk PRIMARY KEY ( id_utwor,
                                                                                            id_uzytkownika );

CREATE TABLE uzytkownicy (
    id_u¿ytkownika              INTEGER NOT NULL,
    nazwa_uzytkownika           VARCHAR2(30 CHAR) NOT NULL,
    email_uzytkownika           VARCHAR2(100 CHAR) NOT NULL,
    haslo                       VARCHAR2(50 CHAR) NOT NULL,
    data_urodzenia              DATE,
    imie                        VARCHAR2(50 CHAR),
    drugie_imie                 VARCHAR2(50 CHAR),
    nazwisko                    VARCHAR2(100 CHAR),
    wlasny_opis                 VARCHAR2(500 CHAR),
    czy_aktywne_konto           CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
    ilosc_przewinien            NUMBER(1) DEFAULT 0 NOT NULL,
    czy_zablokowany             CHAR(1 CHAR) DEFAULT 'N' NOT NULL,
    data_czas_utworzenia_konta  TIMESTAMP(0) DEFAULT systimestamp NOT NULL,
    data_czas_aktywacji_konta   TIMESTAMP(0)
);

COMMENT ON COLUMN uzytkownicy.id_u¿ytkownika IS
    'Klucz g³ówny';

COMMENT ON COLUMN uzytkownicy.nazwa_uzytkownika IS
    'Atrybut unikalny identyfikuj¹cy nazwê u¿ytkownika
';

COMMENT ON COLUMN uzytkownicy.email_uzytkownika IS
    'Na³o¿yæ constraint sprawdzaj¹cy poprawnoœc adresu email.';

COMMENT ON COLUMN uzytkownicy.haslo IS
    'Haslo trzeba bedzie przechowywaæ w formie hashu.';

COMMENT ON COLUMN uzytkownicy.data_urodzenia IS
    'Data urodzenia';

COMMENT ON COLUMN uzytkownicy.imie IS
    'Pierwsze imie';

COMMENT ON COLUMN uzytkownicy.drugie_imie IS
    'Opcjonalnie drugie imiê dla osoby posiadaj¹cej 2 imiona.';

COMMENT ON COLUMN uzytkownicy.wlasny_opis IS
    'W³asny opis u¿ytkownika.';

COMMENT ON COLUMN uzytkownicy.czy_aktywne_konto IS
    'Gdy konto aktywowane to zmiana na Y. Defaultowa wartoœæ to N.';

COMMENT ON COLUMN uzytkownicy.ilosc_przewinien IS
    'Iloœæ przewinien u¿ytkownika. W tej tabeli bêd¹ aktualna iloœæ. Przewinienia bêd¹ zmniejszane, jeœli up³ynie pewien okres od ostatniego przewinienia.Defaultowa wartoœæ to 0.';

COMMENT ON COLUMN uzytkownicy.czy_zablokowany IS
    'Blokada u¿ytkownika. Informacje odnoœnie blokady s¹ przechowywane w tabeli Uzytkownicy_blokady. Jeœli pojawi siê tam wpis, to flaga tutaj zostanie zmieniona na Y.';

COMMENT ON COLUMN uzytkownicy.data_czas_utworzenia_konta IS
    'Data i czas utworzenia konta. Automatycznie wpisanie, gdy konto zostanie utworzone. ';

COMMENT ON COLUMN uzytkownicy.data_czas_aktywacji_konta IS
    'Przydatne, by ewentualnie usuwaæ konta, które nie s¹ aktywowane. NULL oznacza brak aktywacji konta.';

ALTER TABLE uzytkownicy
    ADD CONSTRAINT u¿ytkownicy__email_check CHECK ( REGEXP_LIKE ( email_uzytkownika,
                                                                  '^(\w+\.?)+@((\w)+\.(\w)+){1,}$' ) );

ALTER TABLE uzytkownicy ADD CONSTRAINT uzytkownicy_pk PRIMARY KEY ( id_u¿ytkownika );

ALTER TABLE uzytkownicy ADD CONSTRAINT uzytkownicy__un UNIQUE ( email_uzytkownika );

CREATE TABLE uzytkownicy_obserwowani (
    id_uzytkownika_obserwujacego  INTEGER NOT NULL,
    id_uzytkownika_obserwowanego  INTEGER NOT NULL,
    data_czas_rozpoczecia         TIMESTAMP(0) DEFAULT systimestamp NOT NULL,
    data_czas_zakonczenia         TIMESTAMP(0)
);

COMMENT ON TABLE uzytkownicy_obserwowani IS
    'Tabela ³¹cz¹ca i jednoczeœnie pomocnicza. Wiele u¿ytkowników mo¿e obserwowaæ jednego, jak i wielu mo¿e byæ obserwowanych przez jednego. Klucz z³o¿ony zapewnia przypadek braku konfliktu, gdy ktoœ "polubi", "odlubi", by póŸniej znowu polubiæ.';

ALTER TABLE uzytkownicy_obserwowani
    ADD CONSTRAINT uzytkownicy_obserwowani_pk PRIMARY KEY ( id_uzytkownika_obserwujacego,
                                                            id_uzytkownika_obserwowanego,
                                                            data_czas_rozpoczecia );

CREATE TABLE zgloszenia (
    id_zgloszenia         INTEGER NOT NULL,
    id_zglaszajacego      INTEGER NOT NULL,
    id_zgloszonego        INTEGER NOT NULL,
    id_typ_zgloszenia     INTEGER NOT NULL,
    data_czas_zgloszenia  TIMESTAMP(0) NOT NULL,
    opis_zgloszenia       VARCHAR2(1000 CHAR) NOT NULL
);

COMMENT ON COLUMN zgloszenia.id_zglaszajacego IS
    'Klucz obcy do tabeli U¿ytkownicy (Id_zglaszajacego)';

COMMENT ON COLUMN zgloszenia.id_typ_zgloszenia IS
    'FK do tabeli Typ_zgloszenia';

COMMENT ON COLUMN zgloszenia.opis_zgloszenia IS
    'Opis u¿ytkownika dla moderacji

';

ALTER TABLE zgloszenia ADD CONSTRAINT zgloszenia_pk PRIMARY KEY ( id_zgloszenia );

ALTER TABLE gatunki_obserwowane
    ADD CONSTRAINT gatunki_obserwowane_gatunki_fk FOREIGN KEY ( id_gatunku )
        REFERENCES gatunki ( id_gatunku )
            ON DELETE CASCADE;

ALTER TABLE gatunki_obserwowane
    ADD CONSTRAINT gatunki_obserwowane_uzytkownicy_fk FOREIGN KEY ( id_uzytkownika )
        REFERENCES uzytkownicy ( id_u¿ytkownika )
            ON DELETE CASCADE;

ALTER TABLE komentarze_relacji
    ADD CONSTRAINT komentarze_relacji_relacje_komentarze_fk FOREIGN KEY ( id_komentarza )
        REFERENCES relacje_komentarze ( id_komentarza );

ALTER TABLE komentarze_utwory
    ADD CONSTRAINT komentarze_utwory_utwory_komentarze_fk FOREIGN KEY ( id_komentarza )
        REFERENCES utwory_komentarze ( id_komentarza )
            ON DELETE CASCADE;

ALTER TABLE playlisty_komentarze
    ADD CONSTRAINT playlisty_komentarze_komentarze_playlist_fk FOREIGN KEY ( id_komentarza )
        REFERENCES komentarze_playlist ( id_komentarza );

ALTER TABLE playlisty_komentarze
    ADD CONSTRAINT playlisty_komentarze_playlisty_uzytkownika_fk FOREIGN KEY ( id_playlisty )
        REFERENCES playlisty_uzytkownika ( id_playlisty );

ALTER TABLE playlisty_komentarze
    ADD CONSTRAINT playlisty_komentarze_uzytkownicy_fk FOREIGN KEY ( id_uzytkownika )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

ALTER TABLE playlisty_obserwowane
    ADD CONSTRAINT playlisty_obserwowane_playlisty_uzytkownika_fk FOREIGN KEY ( id_playlisty )
        REFERENCES playlisty_uzytkownika ( id_playlisty );

ALTER TABLE playlisty_obserwowane
    ADD CONSTRAINT playlisty_obserwowane_uzytkownicy_fk FOREIGN KEY ( id_uzytkownika )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

ALTER TABLE playlisty_utwory
    ADD CONSTRAINT playlisty_utwory_playlisty_uzytkownika_fk FOREIGN KEY ( id_playlisty )
        REFERENCES playlisty_uzytkownika ( id_playlisty );

ALTER TABLE playlisty_utwory
    ADD CONSTRAINT playlisty_utwory_utwory_fk FOREIGN KEY ( id_utworu )
        REFERENCES utwory ( id_utworu );

ALTER TABLE playlisty_uzytkownika
    ADD CONSTRAINT playlisty_uzytkownika_uzytkownicy_fk FOREIGN KEY ( id_uzytkownika )
        REFERENCES uzytkownicy ( id_u¿ytkownika )
            ON DELETE CASCADE;

ALTER TABLE relacje_komentarze
    ADD CONSTRAINT relacje_komentarze_relacje_uzytkownika_fk FOREIGN KEY ( id_relacji )
        REFERENCES relacje_uzytkownika ( id_relacji );

ALTER TABLE relacje_komentarze
    ADD CONSTRAINT relacje_komentarze_uzytkownicy_fk FOREIGN KEY ( id_uzytkownika )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

ALTER TABLE relacje_uzytkownika
    ADD CONSTRAINT relacje_uzytkownika_uzytkownicy_fk FOREIGN KEY ( id_uzytkownika )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

ALTER TABLE utwory_gatunki
    ADD CONSTRAINT utwory_gatunki_gatunki_fk FOREIGN KEY ( id_gatunku )
        REFERENCES gatunki ( id_gatunku );

ALTER TABLE utwory_gatunki
    ADD CONSTRAINT utwory_gatunki_utwory_fk FOREIGN KEY ( id_utworu )
        REFERENCES utwory ( id_utworu );

ALTER TABLE utwory_komentarze
    ADD CONSTRAINT utwory_komentarze_utwory_fk FOREIGN KEY ( id_utworu )
        REFERENCES utwory ( id_utworu )
            ON DELETE CASCADE;

ALTER TABLE utwory_komentarze
    ADD CONSTRAINT utwory_komentarze_uzytkownicy_fk FOREIGN KEY ( id_uzytkownika )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

ALTER TABLE utwory_udostepnienia
    ADD CONSTRAINT utwory_udostepnienia_utwory_fk FOREIGN KEY ( id_utworu )
        REFERENCES utwory ( id_utworu );

ALTER TABLE utwory_udostepnienia
    ADD CONSTRAINT utwory_udostepnienia_uzytkownicy_fk FOREIGN KEY ( id_uzytkownika )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

ALTER TABLE utwory_uzytkownicy
    ADD CONSTRAINT utwory_uzytkownicy_utwory_fk FOREIGN KEY ( id_utworu )
        REFERENCES utwory ( id_utworu );

ALTER TABLE utwory_uzytkownicy
    ADD CONSTRAINT utwory_uzytkownicy_uzytkownicy_fk FOREIGN KEY ( id_uzytkownika )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

ALTER TABLE utwory_zezwolenia_remix
    ADD CONSTRAINT utwory_zezwolenia_remix_utwory_fk FOREIGN KEY ( id_utwor )
        REFERENCES utwory ( id_utworu );

ALTER TABLE utwory_zezwolenia_remix
    ADD CONSTRAINT utwory_zezwolenia_remix_uzytkownicy_fk FOREIGN KEY ( id_uzytkownika )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

ALTER TABLE uzytkownicy_obserwowani
    ADD CONSTRAINT uzytkownicy_obserwowani_uzytkownicy_fk FOREIGN KEY ( id_uzytkownika_obserwujacego )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

ALTER TABLE uzytkownicy_obserwowani
    ADD CONSTRAINT uzytkownicy_obserwowani_uzytkownicy_fkv1 FOREIGN KEY ( id_uzytkownika_obserwowanego )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

ALTER TABLE zgloszenia
    ADD CONSTRAINT zgloszenia_typy_zgloszenia_fk FOREIGN KEY ( id_typ_zgloszenia )
        REFERENCES typy_zgloszenia ( id_zgloszenia );

ALTER TABLE zgloszenia
    ADD CONSTRAINT zgloszenia_uzytkownicy_fk FOREIGN KEY ( id_zglaszajacego )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

ALTER TABLE zgloszenia
    ADD CONSTRAINT zgloszenia_uzytkownicy_fkv2 FOREIGN KEY ( id_zgloszonego )
        REFERENCES uzytkownicy ( id_u¿ytkownika );

CREATE OR REPLACE TRIGGER fkntm_playlisty_obserwowane BEFORE
    UPDATE OF id_playlisty ON playlisty_obserwowane
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table Playlisty_obserwowane is violated');
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            21
-- CREATE INDEX                             0
-- ALTER TABLE                             59
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           1
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
